name: Spring CI-CD Template

on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
      docker-image-tag:
        required: true
        type: string
      external-port:
        required: true
        type: number

    secrets:
      docker-username:
        required: true
      docker-password:
        required: true
      ssh-host:
        required: true
      ssh-user:
        required: true
      ssh-key:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build (without tests)
        run: ./gradlew build -x test --no-daemon

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  pre-deploy-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test --no-daemon

  docker-build:
    runs-on: ubuntu-latest
    needs: pre-deploy-test
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker-username }}
          password: ${{ secrets.docker-password }}

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      - name: Move JAR to build/libs
        run: |
          mkdir -p build/libs
          mv *.jar build/libs/

      - name: Echo project name and Docker image tag
        run: |
          echo "Project Name: ${{ inputs.project-name }}"
          echo "Docker Image Tag: ${{ inputs.docker-image-tag }}"
          echo "Docker Username: ${{ secrets.docker-username }}"

      - name: Build Docker image
        run: docker build -t ${{ secrets.docker-username }}/${{ inputs.project-name }}:${{ inputs.docker-image-tag }} .

      - name: Push Docker image
        run: docker push ${{ secrets.docker-username }}/${{ inputs.project-name }}:${{ inputs.docker-image-tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets['ssh-host'] }}
          username: ${{ secrets['ssh-user'] }}
          key: ${{ secrets['ssh-key'] }}
          script: |
            cd /opt/tss/docker-compose
            echo "${{ secrets['docker-password'] }}" | docker login -u "${{ secrets['docker-username'] }}" --password-stdin
            docker compose -f dat-service-redis.yml down
            docker pull ${{ secrets['docker-username'] }}/${{ inputs.project-name }}:${{ inputs.docker-image-tag }}
            docker compose -f dat-service-redis.yml up -d